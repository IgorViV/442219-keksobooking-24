/**
 * Переводит форму в неактивное состояние
 *
 * @param {String} classForm CSS класс формы
 */
const deactivateForm = (classForm) => {
  const currentForm = document.querySelector(`.${classForm}`);
  const fieldsets = currentForm.querySelectorAll('fieldset');
  if (!currentForm.classList.contains(`${classForm}--disabled`)) {
    currentForm.classList.add(`${classForm}--disabled`);
  }
  fieldsets.forEach((fieldset) => fieldset.setAttribute('disabled', 'disabled'));
};

/**
 * Активирует форму
 *
 * @param {String} classForm CSS класс формы
 */
const activateForm = (classForm) => {
  const currentForm = document.querySelector(`.${classForm}`);
  const fieldsets = currentForm.querySelectorAll('fieldset');
  if (currentForm.classList.contains(`${classForm}--disabled`)) {
    currentForm.classList.remove(`${classForm}--disabled`);
  }

  fieldsets.forEach((fieldset) => {
    if (fieldset.hasAttribute('disabled')) {
      fieldset.removeAttribute('disabled');
    }
  });
};

/**
 * Выполняет валидацию формы
 */
const validateForm = () => {

};

export {deactivateForm, activateForm, validateForm};

// + 1. Пропишите тегу <form>правильные значения атрибутов method и адрес action для отправки формы на сервер.
//    ТЗ:
//    2.3. После заполнения всех данных, при нажатии на кнопку «Опубликовать», все данные из формы, включая изображения, с помощью AJAX-запроса отправляются на сервер https://24.javascript.pages.academy/keksobooking методом POST с типом multipart/form-data.

// + 2. Проверьте разметку вашего проекта и добавьте недостающие атрибуты. Например, всем обязательным полям нужно добавить атрибут required. Затем проверьте, правильные ли типы стоят у нужных полей, если нет — проставьте правильные.

// 3. Напишите код для валидации формы добавления объявления. Список полей для валидации:

//  - Заголовок объявления
//      ТЗ
//      3.1. Заголовок объявления:
//      Обязательное текстовое поле;
//      Минимальная длина — 30 символов;
//      Максимальная длина — 100 символов.
//  - Цена за ночь
//      ТЗ
//      3.2. Цена за ночь:
//      Обязательное поле;
//      Числовое поле;
//      Максимальное значение — 1000000.
//  - Количество комнат и количество мест
//      ТЗ
//      3.6. Поле «Количество комнат» синхронизировано с полем «Количество мест» таким образом, что при выборе количества комнат вводятся ограничения на допустимые варианты выбора количества гостей:
//      1 комната — «для 1 гостя»;
//      2 комнаты — «для 2 гостей» или «для 1 гостя»;
//      3 комнаты — «для 3 гостей», «для 2 гостей» или «для 1 гостя»;
//      100 комнат — «не для гостей».
//      Обратите внимание: допускаются разные способы ограничения допустимых значений поля «Количество мест»: удаление из разметки соответствующих элементов option, добавление элементам option состояния disabled или другие способы ограничения, например, с помощью метода setCustomValidity.
//
// NOTE Обратите внимание, что логика синхронизации полей «Время заезда» и «Время выезда» относится к валидации косвенно, поэтому её мы реализуем в следующем задании. Аналогично с полем «Тип жилья» — выбор его опции лишь косвенно влияет на валидацию поля «Цена за ночь».

// 4. Реализуйте логику проверки так, чтобы, как минимум, она срабатывала при попытке отправить форму и не давала этого сделать, если форма заполнена не по правилам. При желании, реализуйте проверки сразу при вводе значения в поле.

// Поля, не перечисленные в техзадании, но существующие в разметке, особой валидации не требуют.

// Непростая валидация?
// Сценарий проверки соответствия количества спальных мест количеству комнат нестандартный, и решить задачу с помощью одних атрибутов не получится. Разберём несколько подходов к решению.
// Первый заключается в физическом ограничении возможности выбора неправильных вариантов. Для этого вы можете или удалять соответствующие элементы option из разметки, или добавлять им атрибут disabled. Этот вариант относительно прост в реализации. Правда у него есть один существенный недостаток — при таком подходе возникает проблема в сценарии взаимодействия: когда у пользователя уже выбран вариант, который вы хотите исключить, произойдёт неявное изменение значения, чего пользователь скорей всего не заметит.
// Второй подход заключается в использовании встроенного API для валидации. Вы пишете код проверки соответствия, и если выбранное количество гостей не подходит под количество комнат, вызываете метод setCustomValidity.
// Вы можете выбрать любой способ из двух или вообще свой третий, потому что это не единственные два способа решения задачи.
