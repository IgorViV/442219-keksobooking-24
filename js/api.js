const getData = (onSuccess, onError) => {

  fetch('https://24.javascript.pages.academy/keksobooking/data')
    .then((response) => {
      if (response.ok) {
        return response.json();
      }

      throw new Error();
    })
    .then((advertisements) => {
      onSuccess(advertisements);
    })
    .catch(() => {
      onError();
    });
};

const sendData = (onSuccess, onError, body) => {
  fetch(
    'https://24.javascript.pages.academy/keksobooking',
    {
      method: 'POST',
      body,
    },
  )
    .then((response) => {
      if (response.ok) {
        return onSuccess();
      }

      throw new Error();
    })
    .catch(() => {
      onError();
    });
};

export {getData, sendData};

// ПОЛУЧЕНИЕ ДАННЫХ
//
// + 1. Доработайте модуль для отрисовки меток на карте так, чтобы в качестве данных использовались не случайно сгенерированные объекты, а те данные, которые вы загрузите с сервера.
// https://24.javascript.pages.academy/keksobooking/data.
//
// + 2. Добавьте обработку возможных ошибок при загрузке.
// Если при загрузке данных с сервера произошла ошибка запроса, нужно показать соответствующее сообщение. Дизайн блока с сообщением нужно придумать самостоятельно.
//
// NOTE: Обратите внимание, что ошибка загрузки данных влияет на отображение меток и их фильтрацию, но не влияет на отправку формы. Даже если данные для меток не загрузились, возможность выбрать адрес на карте и отправить форму сохраняется.

// ОТПРАВКА ДАННЫХ
//
// Сейчас наша форма работает просто: при нажатии на кнопку «Опубликовать» происходит перенаправление на адрес, указанный в атрибуте action.
// Это не совсем удобно, и если оставить всё как есть, пользователю придётся самостоятельно возвращаться назад.
// Стоит ли говорить, что это далеко не оптимальное решение. Поэтому данные из формы мы будем передавать с помощью AJAX.
//
// 1. Добавьте обработчик отправки формы, если ещё этого не сделали, который бы отменял действие формы по умолчанию и отправлял данные формы посредством fetch на сервер.
// После заполнения всех данных, при нажатии на кнопку «Опубликовать», все данные из формы, включая изображения, с помощью AJAX-запроса отправляются на сервер https://24.javascript.pages.academy/keksobooking методом POST с типом multipart/form-data.

// 2. Реализуйте возвращение формы в исходное состояние при успешной отправке, а также показ сообщения пользователю.
// При успешной отправке формы или её очистке (нажатие на кнопку .ad-form__reset) страница, не перезагружаясь, переходит в состояние, когда:
// - все заполненные поля возвращаются в изначальное состояние;
// - фильтрация (состояние фильтров и отфильтрованные метки) сбрасывается;
// - метка адреса возвращается в исходное положение;
// - значение поля адреса корректируется соответственно исходному положению метки;
// - если на карте был показан балун, то он должен быть скрыт.
//
// Если отправка данных прошла успешно, показывается соответствующее сообщение.
// Разметку сообщения, которая находится блоке #success внутри шаблона template, нужно разместить перед закрывающим тегом </body>.
// Сообщение должно исчезать по нажатию на клавишу Esc и по клику на произвольную область экрана.

// 3. Если при отправке данных произошла ошибка запроса, покажите соответствующее сообщение.
// Если при отправке данных произошла ошибка запроса, показывается соответствующее сообщение.
// Разметку сообщения, которая находится в блоке #error в шаблоне template, нужно разместить перед закрывающим тегом </body>.
// Сообщение должно исчезать после нажатия на кнопку .error__button, по нажатию на клавишу Esc и по клику на произвольную область экрана.
// В таком случае вся введённая пользователем информация сохраняется, чтобы у него была возможность отправить форму повторно.

// 4. Похожим образом обработайте нажатие на кнопку сброса.
// При успешной отправке формы или её очистке (нажатие на кнопку .ad-form__reset) страница, не перезагружаясь, переходит в состояние, когда:
// - все заполненные поля возвращаются в изначальное состояние;
// - фильтрация (состояние фильтров и отфильтрованные метки) сбрасывается;
// - метка адреса возвращается в исходное положение;
// - значение поля адреса корректируется соответственно исходному положению метки;
// - если на карте был показан балун, то он должен быть скрыт.
